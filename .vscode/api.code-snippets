{
  "generates a controller": {
    "prefix": "controller",
    "body": [
      "import { Controller, QueryParams, Get, Param, Post, Body, Put, Delete } from \"routing-controllers\";",
      "import { Inject } from \"typedi\";",
      "",
      "import { Filters, EntityList } from \"@preterer/typeorm-extensions\";",
      "",
      "import { $1 } from \"../entities/$2.entity\";",
      "import { $1Service } from \"../services/$2.service\";",
      "",
      "/**",
      " * Controller of $2s",
      " *",
      " * @export",
      " * @class $1Controller",
      " */",
      "@Controller(\"/$2\")",
      "export class $1Controller {",
      "  @Inject()",
      "  private readonly $2Service: $1Service;",
      "",
      "  /**",
      "   * Lists $2s",
      "   *",
      "   * @param {Filters} filters",
      "   * @returns {Promise<EntityList<$1>>}",
      "   * @memberof $1Controller",
      "   */",
      "  @Get(\"/\")",
      "  list(@QueryParams() filters: Filters): Promise<EntityList<$1>> {",
      "    return this.$2Service.list(filters);",
      "  }",
      "",
      "  /**",
      "   * Gets a $2",
      "   *",
      "   * @param {number} id",
      "   * @returns {Promise<$1>}",
      "   * @memberof $1Controller",
      "   */",
      "  @Get(\"/:id(//d+)\")",
      "  get(@Param(\"id\") id: number): Promise<$1> {",
      "    return this.$2Service.get(id);",
      "  }",
      "",
      "  /**",
      "   * Inserts a $2",
      "   *",
      "   * @param {$1} model",
      "   * @returns {Promise<number>}",
      "   * @memberof $1Controller",
      "   */",
      "  @Post(\"/\")",
      "  add(@Body() model: $1): Promise<number> {",
      "    return this.$2Service.add(model).then(entity => entity.id);",
      "  }",
      "",
      "  /**",
      "   * Updates a $2",
      "   *",
      "   * @param {number} id",
      "   * @param {$1} model",
      "   * @returns {Promise<number>}",
      "   * @memberof $1Controller",
      "   */",
      "  @Put(\"/:id(//d+)\")",
      "  update(@Param(\"id\") id: number, model: $1): Promise<number> {",
      "    return this.$2Service.update(id, model).then(entity => entity.id);",
      "  }",
      "",
      "  /**",
      "   * Deletes a $2",
      "   *",
      "   * @param {number} id",
      "   * @returns {Promise<number>}",
      "   * @memberof $1Controller",
      "   */",
      "  @Delete(\"/:id(//d+)\")",
      "  delete(@Param(\"id\") id: number): Promise<number> {",
      "    return this.$2Service.delete(id);",
      "  }",
      "}",
      ""
    ],
    "description": "generates a controller"
  },
  "generates an entity": {
    "prefix": "entity",
    "body": [
      "import { Entity, Column } from \"typeorm\";",
      "",
      "import { CoreEntity } from \"@preterer/typeorm-extensions\";",
      "",
      "import { Tables } from \"../enums/tables\";",
      "",
      "/**",
      " * $1 entity",
      " *",
      " * @export",
      " * @class $1",
      " * @extends {CoreEntity}",
      " */",
      "@Entity({ name: Tables.$2 })",
      "export class $1 extends CoreEntity {}",
      ""
    ],
    "description": "generates an entity"
  },
  "generates a repository": {
    "prefix": "repository",
    "body": [
      "import { EntityRepository } from \"typeorm\";",
      "",
      "import { CoreRepository } from \"@preterer/typeorm-extensions\";",
      "",
      "import { $1 } from \"../entities/$2.entity\";",
      "",
      "/**",
      " * Repository of $2s",
      " *",
      " * @export",
      " * @class $1Repository",
      " * @extends {CoreRepository<$1>}",
      " */",
      "@EntityRepository($1)",
      "export class $1Repository extends CoreRepository<$1> {}",
      ""
    ],
    "description": "generates a repository"
  },
  "generates a service": {
    "prefix": "service",
    "body": [
      "import { DeepPartial } from \"typeorm\";",
      "import { InjectRepository } from \"typeorm-typedi-extensions\";",
      "import { Service } from \"typedi\";",
      "",
      "import { EntityService } from \"@preterer/typeorm-extensions\";",
      "",
      "import { $1 } from \"../entities/$2.entity\";",
      "import { $1Repository } from \"../repositories/$2.repository\";",
      "",
      "/**",
      " * Service of $2s",
      " *",
      " * @export",
      " * @class $1Service",
      " * @extends {EntityService<$1, DeepPartial<$1>>}",
      " */",
      "@Service()",
      "export class $1Service extends EntityService<$1, DeepPartial<$1>> {",
      "  /**",
      "   * Repository of $2s",
      "   *",
      "   * @protected",
      "   * @type {$1Repository}",
      "   * @memberof $1Service",
      "   */",
      "  @InjectRepository($1)",
      "  protected repository: $1Repository;",
      "}",
      ""
    ],
    "description": "generates a service"
  },
  "test": {
    "prefix": "test",
    "body": [
      "import { Container } from \"typedi\";",
      "",
      "import { mockDB, clearDB } from \"./testUtils\";",
      "",
      "import { $1Controller } from \"../src/controllers/$2.controller\";",
      "import { $1Service } from \"../src/services/$2.service\";",
      "import { $1 } from \"../src/entities/$2.entity\";",
      "",
      "describe(\"$1\", function() {",
      "  let $2Controller: $1Controller;",
      "  let $2Service: $1Service;",
      "  let mocked$1: $1;",
      "",
      "  beforeAll(async function() {",
      "    await mockDB();",
      "    $2Controller = Container.get($1Controller);",
      "    $2Service = Container.get($1Service);",
      "  });",
      "",
      "  beforeEach(async function() {",
      "    mocked$1 = await $2Service.add({ title: \"Test\" });",
      "  });",
      "",
      "  afterAll(async function() {",
      "    await clearDB();",
      "  });",
      "",
      "  describe(\"list\", function() {",
      "    it(\"should get list of $2s\", async function() {",
      "      const result = await $2Controller.list();",
      "      expect(result.count).toBeGreaterThan(0);",
      "    });",
      "  });",
      "",
      "  describe(\"get\", function() {",
      "    it(\"should get a $2\", async function() {",
      "      const result = await $2Controller.get(mocked$1.id);",
      "      expect(result).not.toBeUndefined();",
      "    });",
      "",
      "    it(\"should not get a $2 when it doesn't exist\", async function() {",
      "      await expect($2Controller.get(mocked$1.id + 1)).rejects.toThrow();",
      "    });",
      "  });",
      "",
      "  describe(\"add\", function() {",
      "    it(\"should add a $2\", async function() {",
      "      const result = await $2Controller.add({ title: \"Test\" });",
      "      expect(result).not.toBeUndefined();",
      "      const $2 = await $2Service.get(result);",
      "      expect($2).not.toBeUndefined();",
      "    });",
      "  });",
      "",
      "  describe(\"update\", function() {",
      "    it(\"should update a $2\", async function() {",
      "      const title = mocked$1.title + \"New title\";",
      "      await $2Controller.update(mocked$1.id, { title });",
      "      const $2 = await $2Service.get(mocked$1.id);",
      "      expect($2.title).toBe(title);",
      "    });",
      "",
      "    it(\"should not update a $2 when it doesn't exist\", async function() {",
      "      await expect($2Controller.update(mocked$1.id + 1, { title: \"New title\" })).rejects.toThrow();",
      "    });",
      "  });",
      "",
      "  describe(\"delete\", function() {",
      "    it(\"should delete a $2\", async function() {",
      "      await $2Controller.delete(mocked$1.id);",
      "      await expect($2Service.get(mocked$1.id)).rejects.toThrow();",
      "    });",
      "",
      "    it(\"should not delete a $2 when it doesn't exist\", async function() {",
      "      await expect($2Controller.delete(mocked$1.id + 1)).rejects.toThrow();",
      "    });",
      "  });",
      "});",
      ""
    ],
    "description": "test"
  }
}
